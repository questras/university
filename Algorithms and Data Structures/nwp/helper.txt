  1            4            3            2            1            5
4 [ , , , , ]  [4, , , , ]  [4, , , , ]  [4, , , , ]  [4, , , , ]  [4, , , , ]
3 [ , , , , ]  [4, , , , ]  [3,4, , , ]  [3,4, , , ]  [3,4, , , ]  [3,4, , , ]
2 [ , , , , ]  [4, , , , ]  [3,4, , , ]  [2,3, , , ]  [2,3, , , ]  [2,3, , , ]
1 [1, , , , ]  [1, , , , ]  [1,4, , , ]  [1,3, , , ]  [1,2, , , ]  [1,2, , , ]
5 [1, , , , ]  [1, , , , ]  [1,4, , , ]  [1,3, , , ]  [1,2, , , ]  [1,2,5, , ]

c = 1
(longest, ends_at)

  2         3         1         4
3 [ , , , ] [3, , , ] [3, , , ] [3, , , ]
2 [2, , , ] [2, , , ] [2, , , ] [2, , , ]
1 [2, , , ] [2, , , ] [1,2, , ] [1,2, , ]
4 [2, , , ] [2, , , ] [1,2, , ] [1,2,4, ]
c = 1

res[i][j][k] says: from tlonger[1...i] and tshorter[1...j] put MAX_INT if there isnt CAIS, put maximum number in CAIS otherwise

Algorytm:

for i=1...n, j=1...m:
	
	if A[i] == B[i]:
		res[i][j][1] = min(A[i], res[i-1][j][1], res[i][j-1][1])
		for k=2...20:
			curr = MAX_INT
			if res[i-1][j-1][k-1] <= A[i] + c:
				if k==20:
					return 20
				curr = max(res[i-1][j-1][k-1], A[i])

			res[i][j][k] = min(curr, res[i-1][j][k], res[i][j-1][k])

	else:
		for k=1...20:
			res[i][j][k] = min(res[i-1][j][k], res[i][j-1][k])